// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ProductInventoryApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241213092624_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bf1abda-9db6-4b49-8632-7903b5b520e0"),
                            Description = "Electronics items Desc",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("ab4f6cbc-7e7d-4747-83a2-e21cf19b5a02"),
                            Description = "Furniture items Desc",
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f83a54d2-0c5d-477b-844d-f672bf9d4f15"),
                            Balance = 500m,
                            Date = new DateTime(2024, 12, 13, 9, 26, 23, 400, DateTimeKind.Utc).AddTicks(5467),
                            PaidAmount = 2500m,
                            Total = 3000m
                        });
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductPriceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("sellingPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c90a3f2-7b65-4e63-a0f9-0deea0b965ef"),
                            InvoiceId = new Guid("f83a54d2-0c5d-477b-844d-f672bf9d4f15"),
                            ProductId = new Guid("ba8466d2-ae2f-4e7e-ab05-9acde5c359a1"),
                            ProductPriceId = new Guid("13c536a6-dd25-42a0-ad8b-f5d2237d1b2b"),
                            Qty = 2,
                            sellingPrice = 1500m
                        },
                        new
                        {
                            Id = new Guid("0a40b31e-5d82-497e-a3f4-0da50c0157d5"),
                            InvoiceId = new Guid("f83a54d2-0c5d-477b-844d-f672bf9d4f15"),
                            ProductId = new Guid("158d8452-a8b6-4d3b-9c07-059894d5282e"),
                            ProductPriceId = new Guid("a12f75c5-99bf-4123-9d9e-4610ce6c0222"),
                            Qty = 2,
                            sellingPrice = 1500m
                        });
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba8466d2-ae2f-4e7e-ab05-9acde5c359a1"),
                            CategoryId = new Guid("8bf1abda-9db6-4b49-8632-7903b5b520e0"),
                            Description = "Gaming Laptop",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("158d8452-a8b6-4d3b-9c07-059894d5282e"),
                            CategoryId = new Guid("ab4f6cbc-7e7d-4747-83a2-e21cf19b5a02"),
                            Description = "Dining Table",
                            Name = "Table"
                        });
                });

            modelBuilder.Entity("ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSet")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8712890-b97c-4ef8-a636-bc84f20e5d9a"),
                            DateSet = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1500m,
                            ProductId = new Guid("ba8466d2-ae2f-4e7e-ab05-9acde5c359a1")
                        },
                        new
                        {
                            Id = new Guid("a12f75c5-99bf-4123-9d9e-4610ce6c0222"),
                            DateSet = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 200m,
                            ProductId = new Guid("158d8452-a8b6-4d3b-9c07-059894d5282e")
                        },
                        new
                        {
                            Id = new Guid("13c536a6-dd25-42a0-ad8b-f5d2237d1b2b"),
                            DateSet = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1600m,
                            ProductId = new Guid("ba8466d2-ae2f-4e7e-ab05-9acde5c359a1")
                        });
                });

            modelBuilder.Entity("ProductStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc92125e-3f94-40ef-8fbe-7e9b960c5e1d"),
                            DateAdded = new DateTime(2024, 12, 13, 9, 26, 23, 400, DateTimeKind.Utc).AddTicks(3710),
                            ProductId = new Guid("ba8466d2-ae2f-4e7e-ab05-9acde5c359a1"),
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("4bc386f6-3ef8-4bbd-8e64-f1b89d8bc1ac"),
                            DateAdded = new DateTime(2024, 12, 13, 9, 26, 23, 400, DateTimeKind.Utc).AddTicks(3874),
                            ProductId = new Guid("158d8452-a8b6-4d3b-9c07-059894d5282e"),
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("a2e67471-1df2-45b2-b434-f0a7a7900a08"),
                            DateAdded = new DateTime(2024, 12, 13, 9, 26, 23, 400, DateTimeKind.Utc).AddTicks(3876),
                            ProductId = new Guid("158d8452-a8b6-4d3b-9c07-059894d5282e"),
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.HasOne("Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductPrice", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductStock", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("ProductPrices");

                    b.Navigation("ProductStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
